* File config.el

** Contents
#+begin_src elisp :tangle yes
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!

<<doom-config-prologue>>
<<doom-config-user-details>>
<<doom-config-font-details>>
<<doom-config-help>>
<<doom-config-epilogue>>
#+end_src

** User Details
#+name: doom-config-user-details
#+begin_src elisp

;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets. It is optional.
(setq user-full-name "Prem Mallappa"
      user-mail-address "prem.mallappa@gmail.com")


;; Enable *sratch* buffer to work in `lisp-interaction-mode'.
(setq doom-scratch-initial-major-mode 'lisp-interaction-mode)
#+end_src

#+name: doom-config-font-details
#+begin_src elisp

;; Doom exposes five (optional) variables for controlling fonts in Doom:
;;
;; - `doom-font' -- the primary font to use
;; - `doom-variable-pitch-font' -- a non-monospace font (where applicable)
;; - `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;; - `doom-unicode-font' -- for unicode glyphs
;; - `doom-serif-font' -- for the `fixed-pitch-serif' face
;;
;; See 'C-h v doom-font' for documentation and more examples of what they
;; accept. For example:
;;
(setq doom-font (font-spec :family "JetBrains Mono" :size 16)
      doom-big-font (font-spec :family "JetBrains Mono" :size 26)
      doom-variable-pitch-font (font-spec :family "Noto Sans" :size 16)
      doom-unicode-font (font-spec :family "JuliaMono")
      doom-serif-font (font-spec :family "Noto Serif" :weight 'regular))

;;
;; If you or Emacs can't find your font, use 'M-x describe-font' to look them
;; up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
;; refresh your font settings. If Emacs still can't find your font, it likely
;; wasn't installed correctly. Font issues are rarely Doom issues!
#+end_src

* UI
#+name: doom-config-ui
#+begin_src elisp

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'doom-one)

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/Org/")

#+end_src

This following section is help present in the default config.el generated by
`doom install`.

** Help
#+name: doom-config-help
#+begin_src elisp
;; Whenever you reconfigure a package, make sure to wrap your config in an
;; `after!' block, otherwise Doom's defaults may override your settings. E.g.
;;
;;   (after! PACKAGE
;;     (setq x y))
;;
;; The exceptions to this rule:
;;
;;   - Setting file/directory variables (like `org-directory')
;;   - Setting variables which explicitly tell you to set them before their
;;     package is loaded (see 'C-h v VARIABLE' to look up their documentation).
;;   - Setting doom variables (which start with 'doom-' or '+').
;;
;; Here are some additional functions/macros that will help you configure Doom.
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;; Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
;; etc).
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.

#+end_src


** Epilogue
#+name: doom-config-epilogue
#+begin_src elisp
;;(load! "+user.el")
;;(load! "+org.el")
(load! "+ui.el")
;;(load! "+misc.el")
#+end_src


* package.el
:PROPERTIES:
:header-args:emacs-lisp :tangle "packages.el"
:END:

** Prologue
#+name: doom-packages-prologue
#+begin_src elisp :tangle "packages.el"
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

;; To install a package with Doom you must declare them here and run 'doom sync'
;; on the command line, then restart Emacs for the changes to take effect -- or
;; use 'M-x doom/reload'.

#+end_src

** Help
#+begin_src elisp :tangle "packages.el"
;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
;(package! some-package)

;; To install a package directly from a remote git repo, you must specify a
;; `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/radian-software/straight.el#the-recipe-format
;(package! another-package
;  :recipe (:host github :repo "username/repo"))

;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
;(package! this-package
;  :recipe (:host github :repo "username/repo"
;           :files ("some-file.el" "src/lisp/*.el")))

;; If you'd like to disable a package included with Doom, you can do so here
;; with the `:disable' property:
;(package! builtin-package :disable t)

;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
;(package! builtin-package :recipe (:nonrecursive t))
;(package! builtin-package-2 :recipe (:repo "myfork/package"))

;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see radian-software/straight.el#279)
;(package! builtin-package :recipe (:branch "develop"))

;; Use `:pin' to specify a particular commit to install.
;(package! builtin-package :pin "1a2b3c4d5e")


;; Doom's packages are pinned to a specific commit and updated from release to
;; release. The `unpin!' macro allows you to unpin single packages...
;(unpin! pinned-package)

#+end_src

** Disable EVIL mode
#+begin_src elisp :tangle "packages.el"
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; RESTORE EMACS to work in EMACS mode
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Restoring old substitution behavior on s/S
;; Doom replaces the s and S keys with the evil-snipe package (a port of
;; vim-seek/vim-sneak for 2-character versions of f/F/t/T).
(package! evil-snipe :disable t)

;; Doom changes the behavior of the Y key in normal mode to yank-to-EOL
;; (equivalent to y$). This was to make it consistent with the C and D capital
;; operators, and because it was redundant with yy, which is easier to type than y$.
(setq! evil-want-Y-yank-to-eol nil)

;; Vim (and evil) move the cursor one character back when exiting insert mode
(setq evil-move-cursor-back nil)
#+end_src


* Snippets
** Doom snippets

First put the relavent packages into package.el
#+begin_src elisp :tangle "packages.el"

;;;
(package! emacs-snippets
  :recipe (:host github
           :repo "hlissner/emacs-snippets"
           :files ("*")))


(package! yasnippet-snippets
  :recipe (:host github
           :repo "AndreaCrotti/yasnippet-snippets"
           :files ("*")))
#+end_src

Now add the rest to config.el
#+begin_src elisp :tangle yes
(message "end of iceage")
#+end_src

* Competitive Programming
** Leetcode

More configuration options here [[https://github.com/kaiwk/leetcode.el][leetcode.el]]

#+begin_src elisp :tangle "packages.el"

(package! leetcode
  :recipe (:host github :repo "kaiwk/leetcode.el"
           :files ("leetcode.el")
           )
  )

#+end_src

#+begin_src elisp :tangle "config.el"

;;; Start - Leetcode configuration
(add-hook 'leetcode-solution-mode-hook
          (lambda() (flycheck-mode -1)))

(setq leetcode-prefer-language "python3")
(setq leetcode-prefer-sql "mysql")

(setq leetcode-save-solutions t)
(setq leetcode-directory "${HOME}/devel/progs/leetcode")
;;; End - Leetcode configuration
#+end_src

** Hackerrank

Helps

* Programming
